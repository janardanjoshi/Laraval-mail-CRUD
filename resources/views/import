<?php

namespace App\Imports;

use App\TimeRecord;
use App\User;
use Maatwebsite\Excel\Concerns\ToArray;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Auth;

class TimeRecordImport implements ToArray, WithHeadingRow
{
    protected $request;
    
    /**
     * Constructor of Import class
     * 
     * @param \Illuminate\Http\Request $request
     * @param \App\Import $import
     */
    public function __construct($request, $import = null)
    {
        $this->request = $request;
        $this->import = $import;
    }
    
    /**
     * @param array $array
     */
    public function array(array $rows)
    {
        /* finding the keys in the file*/
        $excelKeys = array_keys($rows[0]);
        $keys = ['employee_code', 'in_time', 'out_time', 'attendance_date', 'total_minute'];
        /* If invalid format is provided in excel */
        if (count(array_diff($keys, $excelKeys)) > 0) {
            return $this->excelError(__('Invalid excel format'));
        }
        /* Set array to collect all data from file */ 
        $timeRecordCSVFileDatas = [];
        /* Get all users employee id's */ 
        $users = User::select(User::ID, User::EMPLOYEE_ID)->get()->toArray();
        $allUserIDs = array_column($users, 'id');
        $punchUserIDs = [];            
        foreach ($rows as $key => $row) {
            if (!empty(array_filter($row)) && !empty($row['employee_code'])) {
                /* Check if employee id not found in user table */
                if(!in_array($row['employee_code'], array_column($users, 'employee_id'))) {
                    $this->excelError(__('Employee id not found.'));
                }
                /* get user_id from Emp_id array with emp_id */
                $userKey = array_search($row['employee_code'], array_column($users, 'employee_id'));
                $userId = $users[$userKey]['id'];
                $punchUserIDs[] = $userId;
                
                $timeRecordTimeData = [];
                $punchCount = 1;
                $punchInCount = 1;
                $punchOutCount = 2;
                $timeRecordTimeData[TimeRecord::USER_ID] = $userId;
                
                /* Get date form file */
                $timeRecordDate = $this->filterData($row['attendance_date']);
                $timeRecordTimeData[TimeRecord::DATE] = $this->parseDate($timeRecordDate);

                /* convert time into 24 clock  */
                $intime = $row['in_time'];
                $in_time = date("G:i:s",strtotime($intime));
                $outtime = $row['out_time'];
                $out_time = date("G:i:s",strtotime($outtime));
                /* Get In and Out Time */
                $timeRecordTimeData[TimeRecord::IN_TIME] = $in_time;
                $timeRecordTimeData[TimeRecord::OUT_TIME] = $out_time;
                $timeRecordTotalHours = $this->filterData($row['total_minute']);
                $timeRecordTimeData[TimeRecord::SPENT_TIME] = $timeRecordTotalHours;
                $timeRecordCSVFileDatas[] = $timeRecordTimeData;
            }
        }
        
        /* Data insert and update from time-record table */
        if(count($timeRecordCSVFileDatas) > 0) {
            $date = date('Y-m-d', strtotime($row['attendance_date']));
            /* Get all data of appliy date */
            $timeRecordSameDateData = TimeRecord::where(TimeRecord::DATE, $date)->get();
            $timeRecordToArray = $timeRecordSameDateData->toArray();
            
                /* Default entry for which user not punchh. */
                $notPunchUserIDs = array_diff($allUserIDs, $punchUserIDs);
                if($notPunchUserIDs) {
                    $existUserIDs = $timeRecordSameDateData->pluck(TimeRecord::USER_ID)->toArray();
                    $timeRecordData = [];
                    $count = 0;
                    foreach($notPunchUserIDs as $key => $notPunchUserID) {
                        /* User time-record data not found in punch machine and time-record existing data. */
                        if(!in_array($notPunchUserID, $existUserIDs)) {
                            $timeRecordData[$count][TimeRecord::USER_ID] = $notPunchUserID;
                            $timeRecordData[$count][TimeRecord::DATE] = $this->parseDate($date);
                            $timeRecordData[$count][TimeRecord::IN_TIME] = "00:00:00";
                            $timeRecordData[$count][TimeRecord::OUT_TIME] = "00:00:00";
                            $timeRecordData[$count][TimeRecord::SPENT_TIME] = "00:00:00";
                            $timeRecordData[$count][TimeRecord::STATUS] = TimeRecord::TIME_PERIOD_ABSENT;
                        
                            $count++;
                        }
                    }
                    if($timeRecordData) {
                        $timeRecord = new TimeRecord();
                        $timeRecord = $timeRecord->insert($timeRecordData);
                    }

                }
                
            foreach ($timeRecordCSVFileDatas as $value) {
                $userID = $value['user_id'];
                /* get user_id from Emp_id array with emp_id */
                $objectKey = array_search($userID, array_column($timeRecordToArray, 'user_id'));
                if (is_numeric($objectKey)) {
                    $timeRecord = $timeRecordSameDateData[$objectKey]->load('timeRecordTimes');
                    if (count($value) == 1) {
                        if (count($timeRecord->timeRecordTimes->toArray())) {
                            $timeRecord->timeRecordTimes()->delete();
                        }
                        $timeRecord->{TimeRecord::IN_TIME} = $value['time'][0]['in_time'];
                        $timeRecord->{TimeRecord::OUT_TIME} = isset($value['time'][0]['out_time']) ? $value['time'][0]['out_time'] : NULL;
                        $outTime = isset($value['time'][0]['out_time']) ? $value['time'][0]['out_time'] : $value['time'][0]['in_time'];
                        $spentTime = strtotime($outTime) - strtotime($value['time'][0]['in_time']);
                        $spentTime = date('H:i:s', $spentTime);
                        $timeRecord->{TimeRecord::SPENT_TIME} = $spentTime;
                        $timeRecord->{TimeRecord::STATUS} = TimeRecord::timePeriodStatus($spentTime, $value['time'][0]['in_time'], $date, $value['user_id']);
                        $timeRecord->save();
                    } else {
                        /* If it's a singel Date Record */
                        $databaseTimeDataCount = $timeRecord->timeRecordTimes->count();
                        $fileTimeDataCount = count($value);
                        $fileTime = $value;
                        $addTimeData = [];
                        /* Inserting Data into Object */
                        $outTimes = isset($fileTime['out_time']) ? $fileTime['out_time'] : $fileTime['in_time'];
                        $spentTime = strtotime($outTimes) - strtotime($fileTime['in_time']);
                        $fileTime['spent_time'] = date('H:i:s', $spentTime);
                        $addTimeData[] = $fileTime;
						$minInTime = $fileTime['in_time'];
						$maxOutTime = $fileTime['out_time'];
						$maxOutTimeCheck = empty($maxOutTime) ? $minInTime : $maxOutTime;
						$spentTime = strtotime($maxOutTimeCheck) - strtotime($minInTime);
						$spentTime = date('H:i:s', $spentTime);
						$timeRecord->{TimeRecord::IN_TIME} = $minInTime;
						$timeRecord->{TimeRecord::OUT_TIME} = $maxOutTime;
						$timeRecord->{TimeRecord::SPENT_TIME} = $spentTime;
						$timeRecord->{TimeRecord::STATUS} = TimeRecord::timePeriodStatus($spentTime, $value['in_time'], $value['date'], $value['user_id']);
						$timeRecord->save();
                    }
                } else {

                    $timeRecord = new TimeRecord();
                    $timeRecord->{TimeRecord::USER_ID} = $value['user_id'];
                    $timeRecord->{TimeRecord::DATE} = $value['date'];
                    $timeRecord->{TimeRecord::IN_TIME} = $value['in_time'];
                    $timeRecord->{TimeRecord::OUT_TIME} = isset($value['out_time']) ? $value['out_time'] : NULL;
                    $outTime = isset($value['out_time']) ? $value['out_time'] : $value['in_time'];
                    $spentTime = strtotime($outTime) - strtotime($value['in_time']);
                    $spentTime = date('H:i:s', $spentTime);
                    $timeRecord->{TimeRecord::SPENT_TIME} = $spentTime;
                    $timeRecord->{TimeRecord::STATUS} = TimeRecord::timePeriodStatus($spentTime, $value['in_time'], $value['date'], $value['user_id']);
                    $timeRecord->save();
                    if (count($value) > 1) {

                        $dataInsertInTimeRecordTime = [];
						/* Data insert in TimeRcordTime table */
						$outTime = isset($value['out_time']) ? strtotime($value['out_time']) : strtotime($value['in_time']);
						$spentTime = $outTime - strtotime($value['in_time']);
						$time['spent_time'] = date('H:i:s', $spentTime);
						$dataInsertInTimeRecordTime[] = $time;
						$timeRecordTimes = $timeRecord->timeRecordTimes->toArray();
						$minInTime = $value['in_time'];
						$maxOutTime = $value['out_time'];
						$maxOutTimeCheck = empty($maxOutTime) ? $minInTime : $maxOutTime;
						$spentTime = $dataInsertInTimeRecordTime[0]['spent_time'];
						$timeRecord->{TimeRecord::IN_TIME} = $minInTime;
						$timeRecord->{TimeRecord::OUT_TIME} = $maxOutTime;
						$timeRecord->{TimeRecord::SPENT_TIME} = $spentTime;
						$timeRecord->{TimeRecord::STATUS} = TimeRecord::timePeriodStatus($spentTime, $value['in_time'], $value['date'], $value['user_id']);
						$timeRecord->save();
						/* end change */
                    }
                }
            }
        }
    }
    
    private function filterData($data)
    {
        $data = trim($data);
        
        return !empty($data) ? $data : (is_numeric($data) ? $data : NULL);
    }
    
    private function parseDate($date)
    {
        return $date ? date('Y-m-d', strtotime($date)) : NULL;
    }
    
    private function excelError($message)
    {
        throw new \Exception($message);
    }
}
